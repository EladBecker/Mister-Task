{"version":3,"sources":["services/httpService.js","services/taskService.js","services/socketService.js","cmps/Task.jsx","cmps/AddTask.jsx","pages/TaskManager.jsx","store/actions/taskActions.js","App.js","serviceWorker.js","store/reducers/taskReducer.js","store/reducers/userReducer.js","store/reducers/rootReducer.js","store/store.js","index.js"],"names":["axios","Axios","create","withCredentials","endpoint","data","ajax","a","method","url","res","console","log","dir","response","status","window","location","assign","taskService","add","query","update","remove","start","task","httpService","addedTask","filterBy","_id","taskId","socket","setup","io","terminate","on","eventName","cb","off","emit","Task","this","props","onRemoveTask","onStartTask","className","Subtitles","fontSize","title","Subject","defaultValue","description","ErrorOutline","importance","Schedule","Date","createdAt","toLocaleString","PlayCircleOutline","triesCount","Replay","lastTriedAt","CheckCircleOutline","doneAt","onClick","Delete","disabled","PlayArrow","Component","AddTask","onAddTask","onSubmit","ev","Add","type","name","placeholder","label","value","_TaskManager","preventDefault","target","now","addTask","startTask","loadTasks","removeTask","socketService","updatedTask","updateTask","tasks","length","map","key","mapDispatchToProps","dispatch","err","TaskManager","connect","state","taskReducer","App","component","path","Boolean","hostname","match","initialState","loggedInUser","sessionStorage","user","JSON","parse","users","rootReducer","combineReducers","userReducer","action","loginUser","filter","userId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7acb2f0d.chunk.js","sourcesContent":["import Axios from 'axios';\r\n\r\n// this is for db.json\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n// open this instead when switching to MongoDB\r\n// const BASE_URL = process.env.NODE_ENV === 'production'\r\n// ? '/api/'\r\n// : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login');\r\n        }\r\n        throw err;\r\n    }\r\n}","import httpService from './httpService';\r\nexport const taskService = {\r\n    add,\r\n    query,\r\n    update,\r\n    remove,\r\n    start\r\n};\r\n\r\nasync function add(task) {\r\n    const addedTask = await httpService.post(`task`, task);\r\n    return addedTask\r\n}\r\n\r\nasync function query(filterBy) {\r\n    // const params = (!filterBy) ? '' : utils.createQueryString(filterBy)\r\n    return await httpService.get(`task`);\r\n}\r\n\r\nasync function update(task) {\r\n    return await httpService.put(`task/${task._id}`, task);\r\n}\r\n\r\nasync function start(task) {\r\n    return await httpService.put(`task/${task._id}/start`, task);\r\n}\r\n\r\nasync function remove(taskId) {\r\n    return await httpService.delete(`task/${taskId}`);\r\n}","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport default {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Subtitles, Subject, ErrorOutline, Schedule, PlayCircleOutline, PlayArrow, Delete, CheckCircleOutline, Replay } from '@material-ui/icons/';\r\n\r\nexport class Task extends Component {\r\n    render() {\r\n        const { task, onRemoveTask, onStartTask } = this.props;\r\n        return (\r\n            <div className=\"task-container\">\r\n                <div className=\"task-details\">\r\n                    <h2>\r\n                        <Subtitles fontSize=\"small\" />\r\n                        <span className=\"sub-section\">{task.title}</span>\r\n                    </h2>\r\n                    <p className=\"task-code\">{`code: ${task._id}`}</p>\r\n                    <div className=\"description-container\">\r\n                        <Subject fontSize=\"small\" />\r\n                        <div className=\"description\">\r\n                            <span className=\"sub-section\">Description:</span>\r\n                            <textarea defaultValue={task.description}></textarea>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"importance\">\r\n                        <ErrorOutline fontSize=\"small\" />\r\n                        <span className=\"sub-section\">Importance:</span>\r\n                        {task.importance}\r\n                    </div>\r\n                    <div className=\"created-at\">\r\n                        <Schedule fontSize=\"small\" />\r\n                        <span className=\"sub-section\">Created At:</span>\r\n                        {(new Date(task.createdAt)).toLocaleString()}\r\n                    </div>\r\n                    <div className=\"tries-count\">\r\n                        <PlayCircleOutline fontSize=\"small\" />\r\n                        <span className=\"sub-section\">Tries Counter:</span>\r\n                        {task.triesCount}\r\n                    </div>\r\n                    <div className=\"last-tried-at\">\r\n                        <Replay fontSize=\"small\" />\r\n                        <span className=\"sub-section\">Last Tried At:</span>\r\n                        {(new Date(task.lastTriedAt)).toLocaleString()}\r\n                    </div>\r\n                    <div className=\"done-at\">\r\n                        <CheckCircleOutline fontSize=\"small\" />\r\n                        <span className=\"sub-section\">Done At:</span>\r\n                        <span className={(task.doneAt) ? 'done' : 'not-done'}>\r\n                            {(task.doneAt) ? (new Date(task.doneAt)).toLocaleString() : 'Not Done Yet...'}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"task-actions\">\r\n                    <button className=\"btn-cancel\" onClick={() => onRemoveTask(task._id)}>\r\n                        <Delete fontSize=\"small\" /> {`Delete`}\r\n                    </button>\r\n                    <button className=\"btn-approve\" disabled={task.doneAt} onClick={() => onStartTask(task)}>\r\n                        <PlayArrow fontSize=\"small\" /> {`Start`}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Add } from '@material-ui/icons'\r\n\r\nexport function AddTask({ onAddTask }) {\r\n    return (\r\n        <div className=\"add-task-container\">\r\n            <form onSubmit={(ev) => onAddTask(ev)}>\r\n                <button className=\"btn-approve\"><Add fontSize=\"small\" /></button>\r\n                <input type=\"text\" name=\"title\" placeholder=\"What needs to be done?\" />\r\n                <select name=\"importance\">\r\n                    <optgroup label=\"Importance\">\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"2\">2</option>\r\n                        <option value=\"3\">3</option>\r\n                    </optgroup>\r\n                </select>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { addTask, updateTask, removeTask, loadTasks, startTask } from '../store/actions/taskActions';\r\nimport socketService from '../services/socketService.js'\r\nimport { Task } from '../cmps/Task';\r\nimport { AddTask } from '../cmps/AddTask';\r\n\r\nclass _TaskManager extends Component {\r\n\r\n  async componentDidMount() {\r\n\r\n    socketService.setup()\r\n    try {\r\n      await this.props.loadTasks();\r\n      socketService.emit('entered-task-manager', 'hello')\r\n      socketService.on('task-updated', updatedTask => this.props.updateTask(updatedTask))\r\n    } catch (err) {\r\n      console.log('Oops! we seem to be missing the board you\\'re looking for. going back to board selection.');\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    socketService.off('task-updated')\r\n    socketService.terminate()\r\n  }\r\n\r\n  onAddTask = async (ev) => {\r\n    ev.preventDefault();\r\n    const title = ev.target.title.value;\r\n    const importance = ev.target.importance.value;\r\n    ev.target.title.value = '';\r\n    ev.target.importance.value = 1;\r\n    const task = {\r\n      title,\r\n      description: '',\r\n      importance,\r\n      createdAt: Date.now(),\r\n      triesCount: 0,\r\n      lastTriedAt: null,\r\n      doneAt: null\r\n    }\r\n    await this.props.addTask(task);\r\n    // await this.props.loadTasks();\r\n  }\r\n\r\n  onStartTask = async (task) => {\r\n    await this.props.startTask(task);\r\n    await this.props.loadTasks();\r\n  }\r\n\r\n  onRemoveTask = async (taskId) => {\r\n    await this.props.removeTask(taskId);\r\n    await this.props.loadTasks();\r\n  }\r\n\r\n  render() {\r\n    const { tasks } = this.props;\r\n    if (!tasks || tasks.length === 0) return <div className=\"loading\">Loading</div>;\r\n    return (\r\n      <div className=\"task-manager\">\r\n        <h1>Tasks</h1>\r\n        <AddTask onAddTask={this.onAddTask} />\r\n        <ul>\r\n          {tasks.map(task => {\r\n          return <li key={task._id}>\r\n            <Task task={task}\r\n              onRemoveTask={this.onRemoveTask}\r\n              onStartTask={this.onStartTask} />\r\n          </li>})}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tasks: state.taskReducer.tasks,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addTask,\r\n  updateTask,\r\n  removeTask,\r\n  loadTasks,\r\n  startTask\r\n};\r\n\r\nexport const TaskManager = connect(mapStateToProps, mapDispatchToProps)(_TaskManager);\r\n","import { taskService } from \"../../services/taskService\";\r\n\r\nexport function addTask(task) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedTask = await taskService.add(task);\r\n      dispatch({ type: 'ADD_TASK', addedTask });\r\n    } catch (err) {\r\n      console.log(`error: couldn't add task`, err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateTask(task) {\r\n  return /*async*/ dispatch => {\r\n    try {\r\n      // await taskService.update(task)\r\n      dispatch({ type: 'UPDATE_TASK', task });\r\n    } catch (err) {\r\n      console.log(`error: couldn't update task ${task._id}`, err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function startTask(task) {\r\n  return async dispatch => {\r\n    try {\r\n      await taskService.start(task)\r\n    } catch (err) {\r\n      console.log(`error: couldn't update task ${task._id}`, err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function removeTask(taskId) {\r\n  return async dispatch => {\r\n    try {\r\n      await taskService.remove(taskId)\r\n      dispatch({ type: 'REMOVE_TASK', taskId });\r\n    } catch (err) {\r\n      console.log(`error: couldn't remove task ${taskId}`, err)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function loadTasks() {\r\n  return async dispatch => {\r\n    try {\r\n      const tasks = await taskService.query();\r\n      dispatch({ type: 'SET_TASKS', tasks });\r\n    } catch (err) {\r\n      console.log(`error: couldn't get tasks`, err);\r\n      throw err;\r\n    }\r\n  };\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport './assets/styles/global.scss'\r\nimport { TaskManager } from './pages/TaskManager';\r\n\r\nexport class App extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <main className=\"app-main\">\r\n          <Switch>\r\n            <Route component={TaskManager} path='/' />\r\n          </Switch>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nconst initialState = {\r\n  tasks: []\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_TASKS':\r\n      return { ...state, tasks: action.tasks };\r\n    case 'ADD_TASK':\r\n      return { ...state, tasks: [action.addedTask, ...state.tasks] };\r\n    case 'UPDATE_TASK':\r\n      return {\r\n        ...state, tasks: state.tasks.map(task => {\r\n          if (task._id === action.task._id) task = action.task;\r\n          return task;\r\n        })\r\n      }\r\n    case 'REMOVE_TASK':\r\n      return { ...state, tasks: state.tasks.filter(task => (task._id !== action.taskId)) }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// let localLoggedinUser = null;\r\n// if (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user);\r\n\r\nlet localLoggedinUser = (sessionStorage.user) ? JSON.parse(sessionStorage.user) : null\r\n\r\nconst initialState = {\r\n  loggedInUser: localLoggedinUser,\r\n  users: []\r\n};\r\n\r\nexport default function(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_USER': \r\n      const loginUser = action.loggedInUser\r\n      return { ...state, loggedInUser: loginUser };\r\n\r\n    case 'USER_REMOVE':\r\n      return {\r\n        ...state,\r\n        users: state.users.filter(user => user._id !== action.userId)\r\n      };\r\n    case 'SET_USERS':\r\n      return { ...state, users: action.users };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport taskReducer from './taskReducer';\r\nimport userReducer from './userReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    userReducer,\r\n    taskReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer.js';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import './assets/styles/global.scss'\r\nimport { store } from './store/store';\r\n\r\n// const webpack = require('webpack')\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}